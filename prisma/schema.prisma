// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id         String   @id @default(uuid())
  name       String
  email      String   @unique
  password   String
  adminType  String
  imageUrl   String?
  created_at DateTime @default(now())
}

//enum values for Leads model
enum CurrentSOL {
  Cold
  NoResponse
  CallBack
  Connected
}

enum FinalStatus {
  Converted
  InProgress
}

model Leads {
  id                 String       @id @default(uuid())
  mobileNumber       String?      @unique
  dateOfVisit        String?
  name               String?
  villageCity        String?
  district           String?
  state              String?
  sourceOfLead       String?
  currentSOL         CurrentSOL?  @default(Cold)
  callerName         String?
  assignedTo         String?
  finalStatus        FinalStatus? @default(InProgress)
  whatsappUrl        String?
  noteForLead        String?
  isConvertToProject Boolean      @default(false)
  project            Project?
  createdAt          DateTime     @default(now())
}

// enum Phase {
//   Single
//   Three
// }

model Project {
  id                     String       @id @default(uuid())
  dateOfLead             String
  name                   String
  mobileNumber           String       @unique
  villageCity            String
  district               String
  state                  String
  assignedTo             String
  phase                  String?
  pspclAccountNo         String?
  dscsSpInds             String?
  pspdlSection           String?
  solarConnectionDemand  String?
  proposedSolarLoad      Float?
  monthlyBill            String?
  monthlyUnitConsumption String?
  positiveNegative       String?
  successRate            String?
  visitStatus            String?
  finalStatus            FinalStatus?
  noteForLead            String?
  isQuotation            Boolean      @default(false)
  isConvertToProject     Boolean      @default(true)
  whatsappLink           String?
  leadId                 String       @unique
  lead                   Leads        @relation(fields: [leadId], references: [id])
  quotationId            Quotation?
  createdAt              DateTime     @default(now())
  newTime                DateTime     @default(now())
}

enum SubSidy {
  Subsidy
  NoSubsidy
}

// enum SolarType {
//   Residential
//   Commercial
//   Industrial
// }

model Quotation {
  id                    String   @id @default(uuid())
  mobileNumber          String   @unique
  name                  String
  district              String
  assignedTo            String
  phase                 String?
  pspclAccountNo        String?
  villageCity           String?
  solarConnectionDemand String?
  pspdlSection          String? //this field is PSPCL San Load
  sanLoad               Float?
  monthlyBill           Float?
  monthlyConsumption    Int?
  proposedSolarLoad     Float?
  subsidy               SubSidy?
  baseAmount            Float?
  gst                   Float?
  gstAmount             Float?
  totalPrice            Float?
  noteforQuotation      String?
  pic1                  String?
  pic2                  String?
  pic3                  String?
  pic4                  String?
  pic5                  String?
  isQuotation           Boolean  @default(true)
  projectId             String      @unique
  project               Project      @relation(fields: [projectId], references: [id])
  consumer              Boolean  @default(false)
  paymentDone           Boolean  @default(false)
  createdAt             DateTime @default(now())
}

model Comsumer {
  id                String   @id @default(uuid())
  mobileNumber      String   @unique
  name              String
  district          String
  villageCity       String
  pspclAccountNo    String
  pspdlSection      String //this field is PSPCL San Load
  totalPrice        Float
  gst               Float
  gstAmount         Float
  consumer          Boolean  @default(true)
  createdAt         DateTime @default(now())
}

enum PaymentMode {
Cash
Cheque
UPI 
}

model Payment {
  id                    String            @id @default(uuid())
  name                  String
  mobileNumber          String            @unique
  villageCity           String
  district              String
  phase                 String
  subsidy               SubSidy
  pspclAccountNo        String
  pspdlSection          String
  solarConnectionDemand String
  totalProjectCost      Float?
  totalAmountReceived   Float?
  pendingAmount         Float?
  paymentStatus         String            @default("Payment Panding")
  paymentDone           Boolean           @default(true)
  createdAt             DateTime          @default(now())
  paymentReceived       PaymentReceived[]
}

model PaymentReceived {
  id           String  @id @default(uuid())
  amount       Float
  date         String
  paymentMode  PaymentMode?
  payment      Payment @relation(fields: [paymentId], references: [id])
  paymentId    String
}

enum YesNo {
  Yes
  No
}

model Pspcl {
  id                      String   @id @default(uuid())
  mobileNumber            String   @unique
  name                    String
  villageCity             String
  district                String
  subsidy                 String
  phase                   String
  pspdlSection            String //this is pspclSanLoad
  solarConnectionDemand   String
  dateApplied             String?
  daysElapsed             String?
  email                   String?
  password                String?
  pspclAccountNumber      String?
  newAccountNumberNonSap  String?
  fileSubmittedInOffice   YesNo?
  processingFeePaid       YesNo?
  processingFeeAmount     Float?
  dateOfPayment           String?
  feasibilityCleared      YesNo?
  estimatePass            YesNo?
  estimateFeeDeposit      YesNo?
  estimateAmount          Float?
  meterDrawn              YesNo?
  meterInstalled          YesNo?
  installationDate        String?
  consumerPictureUploaded YesNo?
  panelInverterUploaded   YesNo?
  pspclInspectionClear    YesNo?
  chequeUploaded          YesNo?
  subsidyReleased         YesNo?
  subsidyReleaseDate      String?
  pspclDivision           String?
  subDivisionName         String?
  raMobileNumber          String?
  jeMobileNumber          String?
  sdoMobileNumber         String?
  createdAt               DateTime @default(now())
}

model CompanyDetail {
  id          String @id @default(uuid())
  companyName String  @unique
  companyGST  String  @unique
}

model StockManagement {
  id             String    @id @default(uuid())
  dateOfPurchase String
  companyName    String
  gstNumber      String
  products       Product[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Product {
  id                String          @id @default(uuid())
  productName       String?
  hsnNo             String?
  qty               Float?
  unit              String?
  rate              Float?
  amount            Float?
  sgstPercentage    Float?
  sgstAmount        Float?
  cgstPercentage    Float?
  cgstAmount        Float?
  totalAmount       Float?
  stockManagement   StockManagement @relation(fields: [stockManagementId], references: [id])
  stockManagementId String
}


model FinalSubmissions {
  id                                  String @id @default(uuid())
  // Consumer Details
  consumerName                        String @map("consumer_name")
  accountNo                           String @unique @map("account_no")
  sanLoad                             Float @map("san_load")
  solarLoad                           Float @map("solar_load")
  installationDate                    String? @map("installation_date")

  // Bi-directional Meter Details
  bidirectionalMeterNo                String? @map("bidirectional_meter_no")
  bidirectionalMeterCap               String? @map("bidirectional_meter_cap")
  bidirectionalMeterMake              String? @map("bidirectional_meter_make")
  bidirectionalMeterMultiplyFactor    Int? @map("bidirectional_meter_multiply_factor")

  // Import Reading
  importKWH                           Float? @map("import_kwh")
  importKVAH                          Float? @map("import_kvah")
  importMDI                           Float? @map("import_mdi")

  // Export Reading
  exportKWH                           Float? @map("export_kwh")
  exportKVAH                          Float? @map("export_kvah")
  exportMDI                           Float? @map("export_mdi")

  // Net/Solar Meter Details
  netSolarMeterNo                     String? @map("net_solar_meter_no")
  netSolarMeterCap                    String? @map("net_solar_meter_cap")
  netSolarMeterMake                   String? @map("net_solar_meter_make")
  netSolarMeterMultiplyFactor         Int? @map("net_solar_meter_multiply_factor")

  // Net/Solar Meter Reading
  netSolarKWH                         Float? @map("net_solar_kwh")
  netSolarKVAH                        Float? @map("net_solar_kvah")
  netSolarMDI                         Float? @map("net_solar_mdi")

  // Old Meter Data
  oldMeterNo                          String? @map("old_meter_no")
  oldMeterCap                         String? @map("old_meter_cap")
  oldMeterMake                        String? @map("old_meter_make")
  oldMeterKWH                         Float? @map("old_meter_kwh")
  oldMeterKVAH                        Float? @map("old_meter_kvah")
  oldMeterMDI                         Float? @map("old_meter_mdi")

  @@map("final_submissions")
}